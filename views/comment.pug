extends layout

block content
  .container.my-4
    .card.shadow
      .card-body
        // Encabezado
        h5.card-title Queja ##{complaint.id} realizada a "#{complaint.Entity.name}"
        .d-flex.justify-content-between.align-items-center.mb-3
          span
            strong Estado:
            |  
            span#currentState #{complaint.state}
          button.btn.btn-outline-dark.btn-sm#btnChangeState Cambiar estado

        .mb-4
          label.form-label.fw-bold(for="textoQueja") Texto de la queja
          textarea#textoQueja.form-control(rows="4" readonly)= complaint.description

        h6.fw-bold Comentarios
        .list-group.mb-3#commentsContainer

        button.btn.btn-primary.btn-sm#showAddComment(type="button") Agregar comentario

        form#addCommentForm.mt-3.d-none
          .mb-3
            textarea#newComment.form-control(rows="3" maxlength="2000" placeholder="Escribe tu comentario..." required)
          div
            button.btn.btn-secondary.btn-sm(type="button" id="cancelComment") Cancelar
            button.btn.btn-success.btn-sm(type="submit") Agregar comentario

  // Modal para cambiar estado
  .modal.fade#changeStateModal(tabindex='-1' aria-hidden='true')
    .modal-dialog.modal-dialog-centered
      .modal-content
        .modal-header
          h5.modal-title Seleccione un estado
          button.btn-close(type='button' data-bs-dismiss='modal' aria-label='Close')
        .modal-body
          form#formChangeState
            .mb-3
              label.form-label(for="selectState") Estado nuevo
              select#selectState.form-select
                option(value="") Selecciona un estado
            input#complaintId(type='hidden' value=complaint.id)
        .modal-footer
          button.btn.btn-danger(type='button' data-bs-dismiss='modal') Cancelar
          button.btn.btn-dark#submitChangeState(type='button') Cambiar Estado

  // Modal de sesión expirada
  .modal.fade#sessionExpiredModal(tabindex="-1" aria-labelledby="sessionExpiredModalLabel" aria-hidden="true")
    .modal-dialog.modal-dialog-centered
      .modal-content
        .modal-header.bg-danger.text-white
          h5.modal-title#sessionExpiredModalLabel Sesión expirada
        .modal-body
          | Tu sesión ha expirado. Por favor, inicia sesión nuevamente para continuar.
        .modal-footer
          button.btn.btn-primary(type="button" onclick="logoutAndRedirect()") Iniciar sesión

  script(src="/js/mainComment.js")

  // Script principal
  script.
    document.addEventListener("DOMContentLoaded", () => {
      const btnOpen = document.getElementById("btnChangeState");
      const modalEl = document.getElementById("changeStateModal");
      const submitBtn = document.getElementById("submitChangeState");
      const complaintIdInput = document.getElementById("complaintId");
      const currentStateEl = document.getElementById("currentState");
      const selectState = document.getElementById("selectState");

      if (!btnOpen || !modalEl || !submitBtn) return;

      const bsModal = new bootstrap.Modal(modalEl, { keyboard: true });

      // Abrir modal y cargar opciones
      btnOpen.addEventListener("click", async () => {
        selectState.innerHTML = "<option value=''>Cargando estados...</option>";

        try {
          const res = await fetch("/api/complaints/data/states");
          if (!res.ok) throw new Error("No se pudieron obtener los estados");
          const states = await res.json();

          selectState.innerHTML = "<option value=''>Selecciona un estado</option>";
          states.forEach(state => {
            const opt = document.createElement("option");
            opt.value = state;
            opt.textContent = state;
            selectState.appendChild(opt);
          });

          const cur = currentStateEl && currentStateEl.textContent.trim();
          if (cur) selectState.value = cur;

        } catch (err) {
          console.error("Error cargando estados:", err);
          selectState.innerHTML = "<option value=''>Error al cargar estados</option>";
        }

        bsModal.show();
      });

      function showTempAlert(message, type = "info") {
        const existing = document.getElementById("tempAlertChangeState");
        if (existing) existing.remove();
        const alert = document.createElement("div");
        alert.id = "tempAlertChangeState";
        alert.className = `alert alert-${type} position-fixed bottom-0 end-0 m-3`;
        alert.style.zIndex = 9999;
        alert.textContent = message;
        document.body.appendChild(alert);
        setTimeout(() => alert.remove(), 2500);
      }

      // Enviar cambio de estado
      submitBtn.addEventListener("click", async () => {
        const newState = selectState.value;
        if (!newState) {
          showTempAlert("Seleccione un estado.", "warning");
          return;
        }

        const complaintId = complaintIdInput && complaintIdInput.value;
        try {
          const userEmail = localStorage.getItem('userEmail');

          if (!userEmail) {
            showSessionExpiredModal();
            return new Error('Sesión inactiva');
          }

          const res = await fetch(`/api/complaints/change-state/${complaintId}`, {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
              "x-userEmail" : userEmail
            },
            body: JSON.stringify({ newState })
          });

          if (res.status === 401) {
            showSessionExpiredModal();
            return;
          }

          if (res.ok) {
            bsModal.hide();
            if (currentStateEl) currentStateEl.textContent = newState;
            showTempAlert("Estado cambiado correctamente.", "success");
          } else {
            showTempAlert("Error al cambiar estado.", "danger");
          }
        } catch (err) {
          console.error("Error en petición:", err);
          showTempAlert("Error de red al cambiar estado.", "danger");
        }
      });

      function showSessionExpiredModal() {
        const modal = new bootstrap.Modal(document.getElementById('sessionExpiredModal'));
        modal.show();
      }

      // Lógica de comentarios
      const btnShowComment = document.getElementById("showAddComment");
      const formAddComment = document.getElementById("addCommentForm");
      const cancelCommentBtn = document.getElementById("cancelComment");
      const commentsContainer = document.getElementById("commentsContainer");
      const complaintId = "#{complaint.id}";

      if (btnShowComment && formAddComment) {
        btnShowComment.addEventListener("click", () => {
          formAddComment.classList.remove("d-none");
          btnShowComment.classList.add("d-none");
        });

        cancelCommentBtn.addEventListener("click", () => {
          formAddComment.classList.add("d-none");
          btnShowComment.classList.remove("d-none");
          formAddComment.reset();
        });

        formAddComment.addEventListener("submit", async (e) => {
          e.preventDefault();
          const message = document.getElementById("newComment").value.trim();
          if (!message) return;

          try {
            const res = await fetch(`/api/comments/complaint/${complaintId}`, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ message })
            });

            if (res.status === 201) {
              const data = await res.json();
              const beautyDate = new Date(data.created_at).toLocaleString('es-CO');
              const li = document.createElement("div");
              li.className = "list-group-item d-flex justify-content-between";
              li.innerHTML = `
                <span>${data.message}</span>
                <small class="text-muted">Fecha: ${beautyDate}</small>
              `;
              commentsContainer.appendChild(li);

              formAddComment.reset();
              formAddComment.classList.add("d-none");
              btnShowComment.classList.remove("d-none");
            } else {
              alert("Error al agregar comentario");
            }
          } catch (err) {
            console.error("Error:", err);
            alert("Error de red al agregar comentario");
          }
        });
      }
    });
